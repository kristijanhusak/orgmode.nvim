local m = require('orgmode.config.mappings.map_entry')

return {
  global = {
    org_agenda = m.action('agenda.prompt', { opts = { buffer = false } }),
    org_capture = m.action('capture.prompt', { opts = { buffer = false } }),
  },
  agenda = {
    org_agenda_later = m.action('agenda.advance_span', { args = { 1 } }),
    org_agenda_earlier = m.action('agenda.advance_span', { args = { -1 } }),
    org_agenda_goto_today = m.action('agenda.reset'),
    org_agenda_day_view = m.action('agenda.change_span', 'day'),
    org_agenda_week_view = m.action('agenda.change_span', 'week'),
    org_agenda_month_view = m.action('agenda.change_span', 'month'),
    org_agenda_year_view = m.action('agenda.change_span', 'year'),
    org_agenda_quit = m.action('agenda.quit'),
    org_agenda_switch_to = m.action('agenda.switch_to_item'),
    org_agenda_goto = m.action('agenda.goto_item'),
    org_agenda_goto_date = m.action('agenda.goto_date'),
    org_agenda_redo = m.action('agenda.redo'),
    org_agenda_todo = m.action('agenda.change_todo_state'),
    org_agenda_clock_in = m.action('agenda.clock_in'),
    org_agenda_clock_out = m.action('agenda.clock_out'),
    org_agenda_clock_cancel = m.action('agenda.clock_cancel'),
    org_agenda_set_effort = m.action('agenda.set_effort'),
    org_agenda_clock_goto = m.action('clock.org_clock_goto'),
    org_agenda_clockreport_mode = m.action('agenda.toggle_clock_report'),
    org_agenda_priority = m.action('agenda.set_priority'),
    org_agenda_priority_up = m.action('agenda.priority_up'),
    org_agenda_priority_down = m.action('agenda.priority_down'),
    org_agenda_toggle_archive_tag = m.action('agenda.toggle_archive_tag'),
    org_agenda_set_tags = m.action('agenda.set_tags'),
    org_agenda_deadline = m.action('agenda.set_deadline'),
    org_agenda_schedule = m.action('agenda.set_schedule'),
    org_agenda_filter = m.action('agenda.filter'),
    org_agenda_show_help = m.action('org_mappings.show_help'),
  },
  capture = {
    org_capture_finalize = m.action('capture.refile'),
    org_capture_refile = m.action('capture.refile_to_destination'),
    org_capture_kill = m.action('capture.kill'),
    org_capture_show_help = m.action('org_mappings.show_help'),
  },
  org = {
    org_refile = m.action('capture.refile_headline_to_destination'),
    org_timestamp_up_day = m.action('org_mappings.timestamp_up_day'),
    org_timestamp_down_day = m.action('org_mappings.timestamp_down_day'),
    org_timestamp_up = m.action('org_mappings.timestamp_up'),
    org_timestamp_down = m.action('org_mappings.timestamp_down'),
    org_change_date = m.action('org_mappings.change_date'),
    org_todo = m.action('org_mappings.todo_next_state'),
    org_priority = m.action('org_mappings.set_priority'),
    org_priority_up = m.action('org_mappings.priority_up'),
    org_priority_down = m.action('org_mappings.priority_down'),
    org_todo_prev = m.action('org_mappings.todo_prev_state'),
    org_toggle_checkbox = m.action('org_mappings.toggle_checkbox'),
    org_toggle_heading = m.action('org_mappings.toggle_heading'),
    org_open_at_point = m.action('org_mappings.open_at_point'),
    org_edit_special = m.action('org_mappings.edit_special'),
    org_cycle = m.action('org_mappings.cycle'),
    org_global_cycle = m.action('org_mappings.global_cycle'),
    org_archive_subtree = m.action('org_mappings.archive'),
    org_set_tags_command = m.action('org_mappings.set_tags'),
    org_toggle_archive_tag = m.action('org_mappings.toggle_archive_tag'),
    org_do_promote = m.action('org_mappings.do_promote'),
    org_do_demote = m.action('org_mappings.do_demote'),
    org_promote_subtree = m.action('org_mappings.do_promote', { args = { true } }),
    org_demote_subtree = m.action('org_mappings.do_demote', { args = { true } }),
    org_meta_return = m.action('org_mappings.handle_return'),
    org_insert_heading_respect_content = m.action('org_mappings.insert_heading_respect_content'),
    org_insert_todo_heading = m.action('org_mappings.insert_todo_heading'),
    org_insert_todo_heading_respect_content = m.action('org_mappings.insert_todo_heading_respect_content'),
    org_move_subtree_up = m.action('org_mappings.move_subtree_up'),
    org_move_subtree_down = m.action('org_mappings.move_subtree_down'),
    org_export = m.action('org_mappings.export'),
    org_return = m.action('org_mappings.org_return', { modes = { 'i' } }),
    org_next_visible_heading = m.action('org_mappings.next_visible_heading', {
      modes = { 'n', 'x' },
    }),
    org_previous_visible_heading = m.action('org_mappings.previous_visible_heading', { modes = { 'n', 'x' } }),
    org_forward_heading_same_level = m.action('org_mappings.forward_heading_same_level'),
    org_backward_heading_same_level = m.action('org_mappings.backward_heading_same_level'),
    outline_up_heading = m.action('org_mappings.outline_up_heading'),
    org_deadline = m.action('org_mappings.org_deadline'),
    org_schedule = m.action('org_mappings.org_schedule'),
    org_time_stamp = m.action('org_mappings.org_time_stamp'),
    org_time_stamp_inactive = m.action('org_mappings.org_time_stamp', { args = { true } }),
    org_clock_in = m.action('clock.org_clock_in'),
    org_clock_out = m.action('clock.org_clock_out'),
    org_clock_cancel = m.action('clock.org_clock_cancel'),
    org_clock_goto = m.action('clock.org_clock_goto'),
    org_set_effort = m.action('clock.org_set_effort'),
    org_show_help = m.action('org_mappings.show_help'),
  },
  edit_src = {
    org_edit_src_abort = m.custom([[<Cmd>lua require('orgmode.objects.edit_special').abort()<CR>]]),
    org_edit_src_show_help = m.custom([[<Cmd>lua require('orgmode.objects.help').show({ type = 'edit_src' })<CR>]]),
    org_edit_src_save = m.custom([[<Cmd>lua require('orgmode.objects.edit_special'):new():write()<CR>]]),
  },
  text_objects = {
    inner_heading = m.text_object('inner_heading'),
    around_heading = m.text_object('around_heading'),
    inner_subtree = m.text_object('inner_subtree'),
    around_subtree = m.text_object('around_subtree'),
    inner_heading_from_root = m.text_object('inner_heading_from_root'),
    around_heading_from_root = m.text_object('around_heading_from_root'),
    inner_subtree_from_root = m.text_object('inner_subtree_from_root'),
    around_subtree_from_root = m.text_object('around_subtree_from_root'),
  },
}
